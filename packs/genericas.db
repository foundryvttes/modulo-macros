{"name":"Deck Importer","type":"script","author":"zerDvjz9qdO8eRcs","img":"icons/sundries/gaming/playing-cards.webp","scope":"global","command":"//\n// deck importer 0.1\n// by Viriato139ac\n// based on previous code by @Skimble#8601\n\n// localization strings\n\nconst labeltitle = \"Importador de cartas\";\nconst labelapply = \"Importar\";\nconst labelcancel = \"Cancelar\";\nconst labelcardsDefinition = \"Definición del mazo\";\nconst labelfacespath = \"Directorio de anversos\";\nconst labelbackspath = \"Directorio de reversos\";\nconst labeldeckback = \"Reverso del mazo\";\nconst labeldeckname = \"Nombre del mazo\";\nconst labelcardtype = \"Tipo de carta\";\nconst labelnameback = \"Nombre del reverso\";\nconst labelfacespathHint =\n  \"Directorio donde están almacenadas las imágenes que se usarán como anversos\";\nconst labelbackspathHint =\n  \"Directorio donde están almacenadas las imágenes que se usarán como reversos. Si en el directorio solo hay una imagen, se urará para todas las cartas, si hay tantas imágenes como en el directorio de caras, se asignarán en el mismo orden en el que apareen en ambos directorios. Si hay menos imágenes, se reciclarán (al llegar al final, se comenzará por la primera de nuevo). Si hay más, se descartarán las sobrantes\";\nconst labeldeckbackHint =\n  \"Imagen que se usará como reverso del mazo (sobrescribirá la actual)\";\nconst labeldecknameHint =\n  \"El nombre del mazo en el que se importarán las cartas. Debe haber sido creado anteriormente\";\nconst labelcardtypeHint = \"Tipo de cartas del mazo\";\nconst labelnamebackHint =\n  \"Texto que se usa para dar nombre al reverso de la carta. Generalmente no se usa para nada\";\nconst labelnamebackexample = \"Reverso de la carta\";\nconst TypeBase = \"Base\";\nconst TypeDestiny = \"Destino\";\nconst TypeDrama = \"Drama\";\nconst TypeCosm = \"Cosmos\";\n\n// functions\n\nfunction repeat(arr, toLength) {\n  let output = [...arr];\n  while (output.length < toLength) output = [...output, ...arr];\n  return output.slice(0, toLength);\n}\n\nasync function getFiles(target, extensions = ``, source = `user`) {\n  extensions = extensions instanceof Array ? extensions : [extensions];\n  let filePicker = await FilePicker.browse(source, target, { extensions });\n  if (filePicker.files) return [...filePicker.files];\n  return [];\n}\n\nfunction basename(str, sep) {\n  return str.substr(str.lastIndexOf(sep) + 1);\n}\n\nfunction strip_extension(str) {\n  return str.substr(0, str.lastIndexOf(\".\"));\n}\n\n// constants\n\nlet applyChanges = false;\n\nconst myDialogOptions = {\n  width: 640,\n  //height: 800,\n  //top: 500,\n  //left: 500\n};\n\nlet myCards = game.cards;\nconst cardsList = myCards.map((t) => ({\n  _id: t.id,\n  name: t.data.name,\n  type: t.data.type,\n  select: `<option value=\"` + t.data.name + `\">` + t.data.name + `</option>`,\n}));\n//console.log(cardsList);\nlet decksList = cardsList.filter((t) => t.type === \"deck\");\nlet optionsdecksList = decksList\n  .map(function (elem) {\n    return elem.select;\n  })\n  .join();\n//console.log(optionsdecksList);\n\nlet myTypes = [`<option value=\"base\">` + TypeBase + `</option>`];\nif (game.system.id === \"torgeternity\") {\n  myTypes.push(`<option value=\"destiny\">` + TypeDestiny + `</option>`);\n  myTypes.push(`<option value=\"drama\">` + TypeDrama + `</option>`);\n  myTypes.push(`<option value=\"cosm\">` + TypeCosm + `</option>`);\n}\nlet optionstypesList = myTypes.join();\n//console.log(optionstypesList);\n\n// form definition\n\nnew Dialog(\n  {\n    title: labeltitle,\n    content: `\n  <script>\nfunction selectfacespath() {\n  const fp1 = new FilePicker({\n    type: \"folder\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#facespath\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\n  <script>\nfunction selectbackspath() {\n  const fp1 = new FilePicker({\n    type: \"folder\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#backspath\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\n  <script>\nfunction selectdeckback() {\n  const fp1 = new FilePicker({\n    type: \"image\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#deckback\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\t\n  <form>\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:2px 2px;word-break:normal;}\n    .tg .tg-bzmm{background-color:#34696d;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-d6y8{border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-ly6r{border-color:#efefef;text-align:left;vertical-align:middle}\n    .tg .tg-r5a9{background-color:#34696d;border-color:#efefef;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-049l{background-color:#f0f0f0;border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;font-size:12px;text-align:left;vertical-align:middle}  \n    </style>\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-r5a9\" colspan=\"10\"><span style=\"color:#FFF\"><b>${labelcardsDefinition}</b></span></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelfacespath}:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"facespath\" name=\"facespath\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttonfacespath\" onclick=\"selectfacespath()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFolder\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelbackspath}:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"backspath\" name=\"backspath\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttonbackspath\" onclick=\"selectbackspath()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFolder\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labeldeckback}:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"deckback\" name=\"deckback\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttondeckback\" onclick=\"selectdeckback()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFile\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labeldeckname}:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><select id=\"deckname\" name=\"deckname\">${optionsdecksList}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelcardtype}:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><select id=\"cardtype\" name=\"cardtype\">${optionstypesList}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">${labelnameback}:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><input type=\"text\" id=\"nameback\" name=\"nameback\" value=\"${labelnamebackexample}\"></td>\n      </tr>\n      <tr>\n        <td class=\"tg-049l\" colspan=\"10\">\n\t\t\t\t<b>${labelfacespath}</b>: ${labelfacespathHint}</br>\n\t\t\t\t<b>${labelbackspath}</b>: ${labelbackspathHint}</br>\n\t\t\t\t<b>${labeldeckback}</b>: ${labeldeckbackHint}</br>\n\t\t\t\t<b>${labeldeckname}</b>: ${labeldecknameHint}</br>\n\t\t\t\t<b>${labelcardtype}</b>: ${labelcardtypeHint}</br>\n\t\t\t\t<b>${labelnameback}</b>: ${labelnamebackHint}\n\t\t\t\t</td>\n      </tr>\n\n    </tbody>\n    </table>\n\n  </form>\n  `,\n    buttons: {\n      apply: {\n        icon: \"<i class='fas fa-check-circle'></i>\",\n        label: labelapply,\n        callback: () => {\n          applyChanges = true;\n        },\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times-circle'></i>\",\n        label: labelcancel,\n        callback: () => {\n          applyChanges = false;\n        },\n      },\n    },\n    default: \"cancel\",\n    close: async (html) => {\n      if (applyChanges) {\n        let facespath = html.find('[name=\"facespath\"]')[0].value || \"\";\n        let backspath = html.find('[name=\"backspath\"]')[0].value || \"\";\n        let deckname = html.find('[name=\"deckname\"]')[0].value || \"\";\n        let cardtype = html.find('[name=\"cardtype\"]')[0].value || \"base\";\n        let nameback = html.find('[name=\"nameback\"]')[0].value || \"Card back\";\n        let deckback =\n          html.find('[name=\"deckback\"]')[0].value || \"icons/svg/card-hand.svg\";\n\n        //console.log(\"Faces: \" + facespath);\n        //console.log(\"Backs: \" + backspath);\n        //console.log(\"Deck: \" + deckname);\n        //console.log(\"Name: \" + nameback);\n        if (facespath === \"\" || backspath === \"\" || deckname === \"\") {\n          console.log(\"Error in paths or deck name\");\n        } else {\n          //console.log(repeat([1, 2, 3], 7));\n          //console.log(repeat([1, 2, 3], 2));\n\n          let facecards = await getFiles(\n            facespath,\n            (extensions = [`.jpg`, `.jpeg`, `.png`, `.webp`])\n          );\n          let backcards1 = await getFiles(\n            backspath,\n            (extensions = [`.jpg`, `.jpeg`, `.png`, `.webp`])\n          );\n          let backcards = repeat(backcards1, facecards.length);\n          //console.log(facecards);\n          //console.log(backcards);\n\n          let deck = game.cards.getName(deckname);\n          deck.update({ img: deckback });\n\n          let newcardsdef = [];\n          let cardName;\n          let faceName;\n          let backName;\n\n          for (let i = 0; i < facecards.length; i++) {\n            faceName = facecards[i];\n            backName = backcards[i];\n            cardName = decodeURIComponent(\n              strip_extension(basename(faceName, \"/\"))\n            );\n            //console.log(cardName);\n\n            newcardsdef.push({\n              name: cardName,\n              origin: deck.id,\n              description: cardName,\n              type: cardtype,\n              back: { img: backName, name: nameback },\n              faces: [{ img: faceName, name: cardName }],\n              face: 0,\n            });\n          }\n          //console.log(newcardsdef);\n\n          deck.createEmbeddedDocuments(\"Card\", newcardsdef);\n        }\n      }\n    },\n  },\n  myDialogOptions\n).render(true);","folder":null,"sort":0,"permission":{"default":0,"zerDvjz9qdO8eRcs":3},"flags":{"core":{"sourceId":"Macro.CIdbCUmFzrKFlr6D"},"exportSource":{"world":"pruebassw","system":"swade","coreVersion":"9.238","systemVersion":"0.22.2"},"combat-utility-belt":{"macroTrigger":""}},"_id":"iDFXHJ1lPasQUWlN"}
{"name":"Folder Import","type":"script","author":"zerDvjz9qdO8eRcs","img":"icons/sundries/books/book-leaves-circle.webp","scope":"global","command":"//\n// folder importer 1.0\n// by Viriato139ac\n// \n\n// functions\n\nasync function getFiles(target, extensions = ``, source = `user`) {\n  extensions = extensions instanceof Array ? extensions : [extensions];\n  let filePicker = await FilePicker.browse(source, target, { extensions });\n  if (filePicker.files) return [...filePicker.files];\n  return [];\n}\n\nfunction basename(str, sep) {\n  return str.substr(str.lastIndexOf(sep) + 1);\n}\n\nfunction strip_extension(str) {\n  return str.substr(0, str.lastIndexOf(\".\"));\n}\n\n// constants\n\nlet applyChanges = false;\n\nconst myDialogOptions = {\n  width: 640,\n  //height: 800,\n  //top: 500,\n  //left: 500\n};\n\nlet myFolders = game.folders;\nconst foldersList = myFolders.map((t) => ({\n  _id: t.id,\n  name: t.data.name,\n  select: `<option value=\"` + t.data.name + `\">` + t.data.name + `</option>`,\n}));\n//console.log(foldersList);\nlet optionsfoldersList = foldersList\n  .map(function (elem) {\n    return elem.select;\n  })\n  .join();\nconsole.log(optionsfoldersList);\n\n// form definition\n\nnew Dialog(\n  {\n    title: `Folder Import`,\n    content: `\n  <script>\nfunction selectimagespath() {\n  const fp1 = new FilePicker({\n    type: \"folder\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#imagespath\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\n  <form>\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:2px 2px;word-break:normal;}\n    .tg .tg-bzmm{background-color:#34696d;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-d6y8{border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-ly6r{border-color:#efefef;text-align:left;vertical-align:middle}\n    .tg .tg-r5a9{background-color:#34696d;border-color:#efefef;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-049l{background-color:#f0f0f0;border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;font-size:12px;text-align:left;vertical-align:middle}  \n    </style>\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-r5a9\" colspan=\"10\"><span style=\"color:#FFF\"><b>Select source folder and destination</b></span></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">Source image's folder:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"imagespath\" name=\"imagespath\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttonimagespath\" onclick=\"selectimagespath()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFolder\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">Destination journal folder:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><select id=\"journalfolder\" name=\"journalfolder\">${optionsfoldersList}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-049l\" colspan=\"10\">\n\t\t\t\t<b>Source</b>: Folder where the images are stored (png, jpg and webp supported)</br>\n\t\t\t\t<b>Destination</b>: Journal folder to place images imported\n\t\t\t\t</td>\n      </tr>\n\n    </tbody>\n    </table>\n\n  </form>\n  `,\n    buttons: {\n      apply: {\n        icon: \"<i class='fas fa-check-circle'></i>\",\n        label: `Go!`,\n        callback: () => {\n          applyChanges = true;\n        },\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times-circle'></i>\",\n        label: `Cancel`,\n        callback: () => {\n          applyChanges = false;\n        },\n      },\n    },\n    default: \"cancel\",\n    close: async (html) => {\n      if (applyChanges) {\n        let imagespath = html.find('[name=\"imagespath\"]')[0].value || \"\";\n        let journalfolder = html.find('[name=\"journalfolder\"]')[0].value || \"\";\n\n        if (imagespath === \"\" || journalfolder === \"\") {\n          console.log(\"Error in paths or deck name\");\n        } else {\n          let imageFiles = await getFiles(\n            imagespath,\n            (extensions = [`.jpg`, `.jpeg`, `.png`, `.webp`])\n          );\n\n          let journalData = [];\n          const folder = game.folders.getName(journalfolder).id;\n\n          for (let file of imageFiles) {\n            const fileName = decodeURIComponent(\n              strip_extension(basename(file, \"/\"))\n            );\n            console.log(fileName);\n            journalData.push({ name: fileName, img: file, folder });\n          }\n          JournalEntry.createDocuments(journalData);\n        }\n      }\n    },\n  },\n  myDialogOptions\n).render(true);","folder":null,"sort":0,"permission":{"default":0,"zerDvjz9qdO8eRcs":3},"flags":{"core":{"sourceId":"Macro.naQs1QzWZrvmyOWB"},"exportSource":{"world":"es-rqg-compendios","system":"rqg","coreVersion":"9.238","systemVersion":"1.12.0"},"combat-utility-belt":{"macroTrigger":""}},"_id":"OQJK7zbaM9ubGduh"}
{"name":"Table Rolls (Generic)","type":"script","author":"zerDvjz9qdO8eRcs","img":"icons/weapons/thrown/bomb-metal-brown.webp","scope":"global","command":"//\n// Table Rolls (Generic) v1.1\n// by Viriato139ac\n\nconst myDialogOptions = {\n  width: 640,\n  //height: 800,\n  //top: 500,\n  //left: 500\n};\n\ntableRolls();\n\nfunction tableRolls() {\n  const tableOptions = game.tables.reduce(\n    (a, b) => (a += `<option value=\"${b.name}\">${b.name}</option>`),\n    ``\n  );\n\n  const content = `\n    <form>\n    <table class=\"paleBlueRows\">\n    <tbody>\n    <tr>\n    <td colspan=\"1\">Table</td>\n    <td colspan=\"3\" style=\"font-weight: bold;\"><select name=\"selectedTable\">${tableOptions}</select></td>\n    </tr>\n    </tbody>\n    </table>\n    </form>`;\n\n  new Dialog(\n    {\n      title: \"Table Rolls (Generic)\",\n      content,\n      buttons: {\n        play: {\n          label: \"Roll\",\n          callback: async (html) => {\n            const selectedTable = html.find(`[name=\"selectedTable\"]`).val();\n            const table = game.tables.getName(selectedTable);\n            let charRoll = await new Roll(table.data.formula);\n            charRoll.roll();\n            let flavourString = `Draws a result from the <span style=\"font-weight: bold;color: brown\">${table.name}</span> table`;\n            let contentString = `\n              <hr>\n              <table>\n              <tr>\n                  <th style=\"text-align: center; vertical-align: middle;\">Formula</th>\n                  <th style=\"text-align: center; vertical-align: middle;\">Result</th>\n              </tr>\n              <tr>\n              <td style=\"text-align: center; vertical-align: middle;\">${\n                table.data.formula\n              }</td>\n              <td style=\"text-align: center; vertical-align: middle;\">${\n                charRoll.result\n              }</td>\n              </tr>\n              </table>\n              <hr>\n              ${table.getResultsForRoll(charRoll.result)[0].data.text}\n              <hr>\n              `;\n\n            charRoll.toMessage({\n              user: game.user.id,\n              speaker: ChatMessage.getSpeaker(),\n              flavor: flavourString,\n              content: contentString,\n            });\n          },\n        },\n        cancel: {\n          label: \"Cancel\",\n          callback: (html) => console.log(\"Cancelled\"),\n        },\n      },\n      default: \"play\",\n    },\n    myDialogOptions\n  ).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"zerDvjz9qdO8eRcs":3},"flags":{"core":{"sourceId":"Macro.wgLUh20C37G0olUy"},"exportSource":{"world":"es-rqg-compendios","system":"rqg","coreVersion":"9.242","systemVersion":"1.12.0"},"combat-utility-belt":{"macroTrigger":""}},"_id":"ybECK5CvcfxQTfgq"}
