{
  "name": "folderImport v1.0",
  "type": "script",
  "author": "IWsOZbkFTpNYhEwx",
  "img": "icons/sundries/books/book-leaves-circle.webp",
  "scope": "global",
  "command": "//\n// folder importer 1.0\n// by Viriato139ac\n// \n\n// functions\n\nasync function getFiles(target, extensions = ``, source = `user`) {\n  extensions = extensions instanceof Array ? extensions : [extensions];\n  let filePicker = await FilePicker.browse(source, target, { extensions });\n  if (filePicker.files) return [...filePicker.files];\n  return [];\n}\n\nfunction basename(str, sep) {\n  return str.substr(str.lastIndexOf(sep) + 1);\n}\n\nfunction strip_extension(str) {\n  return str.substr(0, str.lastIndexOf(\".\"));\n}\n\n// constants\n\nlet applyChanges = false;\n\nconst myDialogOptions = {\n  width: 640,\n  //height: 800,\n  //top: 500,\n  //left: 500\n};\n\nlet myFolders = game.folders;\nconst foldersList = myFolders.map((t) => ({\n  _id: t.id,\n  name: t.data.name,\n  select: `<option value=\"` + t.data.name + `\">` + t.data.name + `</option>`,\n}));\n//console.log(foldersList);\nlet optionsfoldersList = foldersList\n  .map(function (elem) {\n    return elem.select;\n  })\n  .join();\nconsole.log(optionsfoldersList);\n\n// form definition\n\nnew Dialog(\n  {\n    title: `Folder Import`,\n    content: `\n  <script>\nfunction selectimagespath() {\n  const fp1 = new FilePicker({\n    type: \"folder\",\n    button: \"image-picker\",\n    callback: (url) => {\n      $(\"#imagespath\").val(url);\n    }\n  });\n  fp1.browse();\n}\n  </script>\n  <form>\n    <style type=\"text/css\">\n    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:2px 2px;word-break:normal;}\n    .tg .tg-bzmm{background-color:#34696d;border-color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-d6y8{border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-ly6r{border-color:#efefef;text-align:left;vertical-align:middle}\n    .tg .tg-r5a9{background-color:#34696d;border-color:#efefef;color:#ffffff;font-family:\"Courier New\", Courier, monospace !important;;text-align:left;vertical-align:middle}\n    .tg .tg-049l{background-color:#f0f0f0;border-color:#efefef;font-family:\"Courier New\", Courier, monospace !important;;font-size:12px;text-align:left;vertical-align:middle}  \n    </style>\n    <table class=\"tg\">\n    <tbody>\n      <tr>\n        <td class=\"tg-r5a9\" colspan=\"10\"><span style=\"color:#FFF\"><b>Select source folder and destination</b></span></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">Source image's folder:</td>\n        <td class=\"tg-d6y8\" colspan=\"6\"><input type=\"text\" id=\"imagespath\" name=\"imagespath\" value=\"\"></td>\n        <td class=\"tg-d6y8\" colspan=\"2\"><button id=\"buttonimagespath\" onclick=\"selectimagespath()\" type=\"button\">${game.i18n.localize(\n          \"FILES.SelectFolder\"\n        )}</button></td>\n      </tr>\n      <tr>\n        <td class=\"tg-d6y8\" colspan=\"2\">Destination journal folder:</td>\n        <td class=\"tg-d6y8\" colspan=\"8\"><select id=\"journalfolder\" name=\"journalfolder\">${optionsfoldersList}</select></td>\n      </tr>\n      <tr>\n        <td class=\"tg-049l\" colspan=\"10\">\n\t\t\t\t<b>Source</b>: Folder where the images are stored (png, jpg and webp supported)</br>\n\t\t\t\t<b>Destination</b>: Journal folder to place images imported\n\t\t\t\t</td>\n      </tr>\n\n    </tbody>\n    </table>\n\n  </form>\n  `,\n    buttons: {\n      apply: {\n        icon: \"<i class='fas fa-check-circle'></i>\",\n        label: `Go!`,\n        callback: () => {\n          applyChanges = true;\n        },\n      },\n      cancel: {\n        icon: \"<i class='fas fa-times-circle'></i>\",\n        label: `Cancel`,\n        callback: () => {\n          applyChanges = false;\n        },\n      },\n    },\n    default: \"cancel\",\n    close: async (html) => {\n      if (applyChanges) {\n        let imagespath = html.find('[name=\"imagespath\"]')[0].value || \"\";\n        let journalfolder = html.find('[name=\"journalfolder\"]')[0].value || \"\";\n\n        if (imagespath === \"\" || journalfolder === \"\") {\n          console.log(\"Error in paths or deck name\");\n        } else {\n          let imageFiles = await getFiles(\n            imagespath,\n            (extensions = [`.jpg`, `.jpeg`, `.png`, `.webp`])\n          );\n\n          let journalData = [];\n          const folder = game.folders.getName(journalfolder).id;\n\n          for (let file of imageFiles) {\n            const fileName = decodeURIComponent(\n              strip_extension(basename(file, \"/\"))\n            );\n            console.log(fileName);\n            journalData.push({ name: fileName, img: file, folder });\n          }\n          JournalEntry.createDocuments(journalData);\n        }\n      }\n    },\n  },\n  myDialogOptions\n).render(true);",
  "flags": {
    "core": {
      "sourceId": "Macro.naQs1QzWZrvmyOWB"
    },
    "exportSource": {
      "world": "es-rqg-compendios",
      "system": "rqg",
      "coreVersion": "9.238",
      "systemVersion": "1.12.0"
    }
  }
}